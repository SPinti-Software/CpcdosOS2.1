/* Wrap for Cpcdos functions */

#include <stdio.h>
#include <pc.h>
#include <sys/nearptr.h>
#include <time.h>

#include "_wrap.h"

// #include "leakchk.h"

extern void printf_fb(char* texte);

extern void Interruption_Timer(int sig);



void __wrap_puts (const char* txt)
{
	__real_puts (txt);
	Interruption_Timer(0);
}
/*

void* __wrap_malloc (size_t taille)
{
	// Interruption_Timer(0);
	// return cpc_malloc(taille); Attente correction
	// fprintf(stdout, "malloc(%d)\n", (int) taille);
	
	return __real_malloc (taille);
}


void* __wrap_calloc (size_t nombreItems, size_t taille)
{
	// Interruption_Timer(0);
	// return cpc_calloc(nombre, taille); Attente correction
	return __real_calloc (nombreItems, taille);
	
}


void __wrap_free (void* pointeur)
{
	
	if(pointeur != NULL)
		__real_free (pointeur);
	// cpc_free(pointeur); Attente correction
	// Interruption_Timer(100);
}



void __wrap_fclose (FILE* stream)
{
	__real_fclose (stream);
	Interruption_Timer(0);
}


void __wrap_abort (void)
{
	printf("[FR] Le systeme va s'arreter brutalement. [EN] System will abruptly stop. BYE!\n");
	__real_abort ();
}

// int __real_system (const char* commande);
// int __wrap_system (const char* commande)
// {
	// __real_puts(commande);
	// return 0;
	// __real_system (stream);
// }
 


void __wrap_sleep (int secondes)
{
	if(secondes < 1)
	{
		Interruption_Timer(0);
	}
	else
	{
		// Declarer la structure
		struct timeval tv;
		int divise = 0;
		int moins = 0;
		
		int millisecondes = secondes * 1000;
		
		// Departager le temps CPU avec le temps de pause
		if(millisecondes <= 500)
		{
			divise = 2;
			moins = 100;
		} 
		else if(millisecondes < 1000)
		{
			divise = 4;
			moins = 200;
		}
		else if(millisecondes == 1000)
		{
			divise = 6;
			moins = 300;
		}
		else if((millisecondes > 1000) && (millisecondes <= 2000))
		{
			divise = 8;
			moins = 500;
		}
		else if((millisecondes > 2000) && (millisecondes < 5000))
		{
			divise = 16;
			moins = 800;
		}
		else if(millisecondes >= 5000)
		{
			divise = 32;
			moins = 1200;
		}
		
		millisecondes -= moins;
		
		
		for(int boucle = 0; boucle <= divise; boucle++)
		{
			tv.tv_sec = (time_t) 0;
			tv.tv_usec = (long int) (millisecondes * 1000) / divise;	

			Interruption_Timer(0);
			// Attendre sur le descripteur ZERO
			select(0, NULL, NULL, NULL, &tv);
		}
	}
}


void __wrap_usleep (int usecondes)
{
	if(usecondes < 1)
	{
		Interruption_Timer(0);
	}
	else
	{
		// Declarer la structure
		struct timeval tv;
		
		if(usecondes > 1000)
		{
			tv.tv_sec = (time_t) 0;
			tv.tv_usec = (long int) usecondes / 2;	
			
			// Attendre sur le descripteur ZERO
			select(0, NULL, NULL, NULL, &tv);
			
			Interruption_Timer(0);
			
			tv.tv_sec = (time_t) 0;
			tv.tv_usec = (long int) usecondes / 2;
			
			// Attendre sur le descripteur ZERO
			select(0, NULL, NULL, NULL, &tv);
		} 
		else
		{
			tv.tv_sec = (time_t) 0;
			tv.tv_usec = (long int) usecondes - 500; // Enlever 400 us
			
			// Attendre sur le descripteur ZERO
			select(0, NULL, NULL, NULL, &tv);
			Interruption_Timer(0);
		}
	}
}


void __wrap_fb_Sleep (int millisecondes)
{
	
	if(millisecondes < 1)
	{
		Interruption_Timer(0);
	}
	else
	{
		// Declarer la structure
		struct timeval tv;
		int divise = 0;
		int moins = 0;
		
		// Departager le temps CPU avec le temps de pause
		if(millisecondes < 500)
		{
			divise = 2;
			moins = 100;
		} 
		else if(millisecondes < 1000)
		{
			divise = 4;
			moins = 200;
		}
		else if(millisecondes == 1000)
		{
			divise = 6;
			moins = 300;
		}
		else if((millisecondes > 1000) && (millisecondes <= 2000))
		{
			divise = 8;
			moins = 500;
		}
		else if((millisecondes > 2000) && (millisecondes < 5000))
		{
			divise = 16;
			moins = 800;
		}
		else if(millisecondes >= 5000)
		{
			divise = 32;
			moins = 1200;
		}
		
		millisecondes -= moins;
		
		
		for(int boucle = 0; boucle <= divise; boucle++)
		{
			tv.tv_sec = (time_t) 0;
			tv.tv_usec = (long int) (millisecondes * 1000) / divise;	
			
			Interruption_Timer(0);
			
			// Attendre sur le descripteur ZERO
			select(0, NULL, NULL, NULL, &tv);
		}
	}
}
*/