/*	
	======================================
	==  CPinti ---> Section Scritique   ==
	======================================
	
	Developpe entierement par Sebastien FAVIER

	Description
		Module permettant l'utilisation des fonctionnalites
		 de bloquage des interruptions et executions sheduled
		 des fonctionnalites du noyau.
	
	Creation 
		19/10/2016


	Mise a jour
		19/10/2018
		
	16-10-2018	: Adaption 2.1 beta 1.1
	07-12-2017	: AMELIORATION du code en suivant une procedure sticte de GCCk
	
*/
#include <memory>

#include "debug.h"
#include "cpinti.h" // inclut taches.h

#include "func_cpi.h"

#include "threads.h"
#include "taches.h"

#include "socket.h"
#include "ping.h"
#include "serveur.h"
#include "client.h" 
 
#include "io.h"

#include "heap.h"
 

unsigned int __CpintiCore_CpcdosOSx__::cpinti_est_section_critique()
	{
		// Cette fonction permet de savoir si le noyau est toujours en section critique
		//  Retourne 0 : NON
		//			 >0: OUI + Mode
		
		if(__CpintiCore_CpcdosOSx__::section_critique::Entre_en_section == true)
			return __CpintiCore_CpcdosOSx__::section_critique::Mode; // Retourne le mode
		else
			return _SANS_FLAG; // Ya rien ;)
		
	}
	
	unsigned int __CpintiCore_CpcdosOSx__::cpinti_est_section_critique(int mode)
	{
		// Cette fonction permet de savoir si le noyau est toujours en section critique
		//  en precisant le mode
		//  Retourne 0 : NON
		//			 >0: OUI + ID
		
		if(__CpintiCore_CpcdosOSx__::section_critique::Entre_en_section == true)
		{		
			// Attendre la creation d'un thread
			if(mode == _DEB_THREAD)
			{
				if(__CpintiCore_CpcdosOSx__::section_critique::DEB_THREAD == true)
					return __CpintiCore_CpcdosOSx__::section_critique::TID;
			}	
			// Attendre la recuperation des arguments d'entre d'un thread
			else if(mode == _FIN_THREAD_ARGS)
			{
				if(__CpintiCore_CpcdosOSx__::section_critique::ARG_THREAD == true)
					return __CpintiCore_CpcdosOSx__::section_critique::TID;
			}	
			// Attente la fin d'exection d'un thread
			else if(mode == _FIN_EXEC_THREAD)
			{
				if(__CpintiCore_CpcdosOSx__::section_critique::FIN_THREAD == true)
					return __CpintiCore_CpcdosOSx__::section_critique::TID;
			}	
			// Attente la creation d'un processus
			else if(mode == _DEB_EXEC_PROC)
			{
				if(__CpintiCore_CpcdosOSx__::section_critique::DEB_PROC == true)
					return __CpintiCore_CpcdosOSx__::section_critique::TID;
			}	
			// Attente la fin d'execution d'un processus
			else if(mode == _FIN_EXEC_PROC)
			{
				if(__CpintiCore_CpcdosOSx__::section_critique::FIN_PROC == true)
					return __CpintiCore_CpcdosOSx__::section_critique::TID;
			}
			
			return _SANS_FLAG; // Ya rien!
		}
		
		return _SANS_FLAG; // Ya rien non plus ;)
	}
	

	void __CpintiCore_CpcdosOSx__::cpinti_fin_section_critique()
	{
		// Nettoie et previent qu'on peut executer d'autres fonctions interruptibles
		
		__CpintiCore_CpcdosOSx__::section_critique::delai 				= 0;
		__CpintiCore_CpcdosOSx__::section_critique::TID 				= 0;
		__CpintiCore_CpcdosOSx__::section_critique::Mode 				= 0;
		__CpintiCore_CpcdosOSx__::section_critique::Entre_en_section 	= false;
		__CpintiCore_CpcdosOSx__::section_critique::verrouille 			= false;

		__CpintiCore_CpcdosOSx__::section_critique::DEB_THREAD 			= false;
		__CpintiCore_CpcdosOSx__::section_critique::ARG_THREAD 			= false;
		__CpintiCore_CpcdosOSx__::section_critique::FIN_THREAD 			= false;
		__CpintiCore_CpcdosOSx__::section_critique::DEB_PROC 			= false;
		__CpintiCore_CpcdosOSx__::section_critique::FIN_PROC 			= false;
		
		__CpintiCore_CpcdosOSx__::section_critique::adresse_debut 		= 0x0;
		__CpintiCore_CpcdosOSx__::section_critique::adresse_fin 		= 0x0;
	}
	
	void __CpintiCore_CpcdosOSx__::cpinti_entrer_section_critique(unsigned int mode)
	{
		cpinti_entrer_section_critique(1, mode, 0);
	}
	
	void __CpintiCore_CpcdosOSx__::cpinti_entrer_section_critique(unsigned int TID, unsigned int mode, unsigned int delai)
	{
		// Cette fonction permet d'eviter toutes interruptions et ou creations de nouveaux threads
		//  afin d'eviter d'ecrire dans la memoire publique pendant qu'un autre thread la lis.
		//  et eviter des crashs tien!! :)
		
		//  	TID 	: Numero d'identification du thread courant
		// 		mode:	: Mode de "bloquage" en priorite
		//		delai	: Delai maximal en micro-secondes
		
		
		
		if(mode != _SANS_FLAG)
		{		
			// Parametres par defauts
			__CpintiCore_CpcdosOSx__::section_critique::delai 				= delai;
			__CpintiCore_CpcdosOSx__::section_critique::TID 				= TID;
			__CpintiCore_CpcdosOSx__::section_critique::Mode 				= mode;
			__CpintiCore_CpcdosOSx__::section_critique::Entre_en_section 	= true;
			__CpintiCore_CpcdosOSx__::section_critique::verrouille 			= true;

			__CpintiCore_CpcdosOSx__::section_critique::DEB_THREAD 			= false;
			__CpintiCore_CpcdosOSx__::section_critique::ARG_THREAD 			= false;
			__CpintiCore_CpcdosOSx__::section_critique::FIN_THREAD 			= false;
			__CpintiCore_CpcdosOSx__::section_critique::DEB_PROC 			= false;
			__CpintiCore_CpcdosOSx__::section_critique::FIN_PROC 			= false;
			
			__CpintiCore_CpcdosOSx__::section_critique::adresse_debut 		= 0x0;
			__CpintiCore_CpcdosOSx__::section_critique::adresse_fin 		= 0x0;
			
			// Attendre la creation d'un thread
			if(mode == _DEB_THREAD)
				__CpintiCore_CpcdosOSx__::section_critique::DEB_THREAD 		= true;
			
			// Attendre la recuperation des arguments d'entre d'un thread
			else if(mode == _FIN_THREAD_ARGS)
				__CpintiCore_CpcdosOSx__::section_critique::ARG_THREAD 		= true;
				
			// Attente la fin d'exection d'un thread
			else if(mode == _FIN_EXEC_THREAD)
				__CpintiCore_CpcdosOSx__::section_critique::FIN_THREAD 		= true;
				
			// Attente la creation d'un processus
			else if(mode == _DEB_EXEC_PROC)
				__CpintiCore_CpcdosOSx__::section_critique::DEB_PROC 		= true;
				
			// Attente la fin d'execution d'un processus
			else if(mode == _FIN_EXEC_PROC)
				__CpintiCore_CpcdosOSx__::section_critique::FIN_PROC 		= true;
			
			else
				cpinti_dbg::CPINTI_DEBUG("Le mode d'entre de la section critique est inconnu", 
										"Enter critical section mode is not recognized", 
										"__CpintiCore_CpcdosOSx__", "cpinti_entrer_section_critique", Ligne_saute, Alerte_erreur, Date_avec, Ligne_r_normal);	
		}
		else
			cpinti_dbg::CPINTI_DEBUG("Le mode d'entre de la section critique est NULL", 
									"Enter critical section mode is NULL", 
									"__CpintiCore_CpcdosOSx__", "cpinti_entrer_section_critique", Ligne_saute, Alerte_erreur, Date_avec, Ligne_r_normal);
	}